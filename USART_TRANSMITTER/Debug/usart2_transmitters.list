
usart2_transmitters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000440  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000012d  00000000  00000000  00010830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00010960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  000109b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db2b  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000584  00000000  00000000  0001e523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f3e7  00000000  00000000  0001eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006de8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  0006dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000398 	.word	0x08000398

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000398 	.word	0x08000398

080001d4 <uart_config>:
#include <stm32f4xx.h>

void uart_config(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	6. enable the Transmission/ reception setting the TE & RE bit in UART_CR1 register.
	7. we are using UART2 channel for PA2 & PA3 pin.
	*/

	//1. enable the clocks
	RCC-> AHB1ENR|= (1U<<0);				//for PortA, pin PA2 & PA3
 80001d8:	4b29      	ldr	r3, [pc, #164]	; (8000280 <uart_config+0xac>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <uart_config+0xac>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC-> APB1ENR|= (1U<<17); 				//eneable USART
 80001e4:	4b26      	ldr	r3, [pc, #152]	; (8000280 <uart_config+0xac>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001e8:	4a25      	ldr	r2, [pc, #148]	; (8000280 <uart_config+0xac>)
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ee:	6413      	str	r3, [r2, #64]	; 0x40

	//2. setting up the gpio moder for PA2 & pa3 PIN for alternate function mode
	GPIOA->MODER|=(2U<<4);		//bits for 5:4 = 1:0 for pa2
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <uart_config+0xb0>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a23      	ldr	r2, [pc, #140]	; (8000284 <uart_config+0xb0>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(2U<<6);		//bits for 6:7 = 1:0 for pa3
 80001fc:	4b21      	ldr	r3, [pc, #132]	; (8000284 <uart_config+0xb0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a20      	ldr	r2, [pc, #128]	; (8000284 <uart_config+0xb0>)
 8000202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000206:	6013      	str	r3, [r2, #0]

	GPIOA->MODER|=(1U<<10);
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <uart_config+0xb0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <uart_config+0xb0>)
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<11);
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <uart_config+0xb0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <uart_config+0xb0>)
 800021a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800021e:	6013      	str	r3, [r2, #0]

	//2.1 configure the output speed register for high speed data transfer
	GPIOA-> OSPEEDR|= (3U<<4)|(3U<<6);
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <uart_config+0xb0>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a17      	ldr	r2, [pc, #92]	; (8000284 <uart_config+0xb0>)
 8000226:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800022a:	6093      	str	r3, [r2, #8]


	//2.2 select the alternate function on pg no - 151 AF7-0111
	GPIOA->AFR[0]|= (7U<<8);
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <uart_config+0xb0>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <uart_config+0xb0>)
 8000232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000236:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(7U<<12);
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <uart_config+0xb0>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <uart_config+0xb0>)
 800023e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000242:	6213      	str	r3, [r2, #32]
	//GPIOA->AFR[0]|=(1U<<9)|(1U<<10)|(1U<<8);		//  FOR PA2
	//GPIOA-> AFR[0]|= (1U<<12)|(1U<<13)|(1U<<14);		//FOR PA3 PIN

	//3.enable the UE bit from USART_CR1 register
	USART2-> CR1= 0X00; 		//clear all bit first
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <uart_config+0xb4>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
	USART2->CR1|= (1U<<13); 			//set UE at 13 no
 800024a:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <uart_config+0xb4>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <uart_config+0xb4>)
 8000250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000254:	60d3      	str	r3, [r2, #12]

	//4. set M- bit for data length
	USART2->CR1&= ~(1U<<12); 			//for 8 bit data use
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <uart_config+0xb4>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <uart_config+0xb4>)
 800025c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000260:	60d3      	str	r3, [r2, #12]

	//5. set the baud rate for USART in BRR register, set 115200 baudrate
	//USART2 -> BRR|=(13<<0)|(23<<4);
	USART2 -> BRR = ((0x0068<<4) + 0x0003);
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <uart_config+0xb4>)
 8000264:	f240 6283 	movw	r2, #1667	; 0x683
 8000268:	609a      	str	r2, [r3, #8]
	//USART2-> BRR=0x16d;

	//6. Enable the TE & RE bit from CR1 register
	USART2-> CR1|=(1U<<3); 		// for transmission
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <uart_config+0xb4>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <uart_config+0xb4>)
 8000270:	f043 0308 	orr.w	r3, r3, #8
 8000274:	60d3      	str	r3, [r2, #12]
	//USART2->CR1|=(1U<<2); 		//for reception
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	40004400 	.word	0x40004400

0800028c <UART2_sendstring>:

void UART2_sendstring(char *str)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000294:	e00d      	b.n	80002b2 <UART2_sendstring+0x26>
		{
			USART2 -> DR = *str;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	781a      	ldrb	r2, [r3, #0]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <UART2_sendstring+0x3c>)
 800029c:	605a      	str	r2, [r3, #4]
			while (((USART2 -> SR) & (1U<<6))==0);
 800029e:	bf00      	nop
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <UART2_sendstring+0x3c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f9      	beq.n	80002a0 <UART2_sendstring+0x14>
			str++;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1ed      	bne.n	8000296 <UART2_sendstring+0xa>
		}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40004400 	.word	0x40004400

080002cc <main>:

int main()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	uart_config();
 80002d2:	f7ff ff7f 	bl	80001d4 <uart_config>

	while(1)
	{
		UART2_sendstring("hello\r");			//send string
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <main+0x28>)
 80002d8:	f7ff ffd8 	bl	800028c <UART2_sendstring>
		for(int i =0; i<1000000; i++)		// for delay of 1sec
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	e002      	b.n	80002e8 <main+0x1c>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <main+0x2c>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	ddf8      	ble.n	80002e2 <main+0x16>
		UART2_sendstring("hello\r");			//send string
 80002f0:	e7f1      	b.n	80002d6 <main+0xa>
 80002f2:	bf00      	nop
 80002f4:	080003b0 	.word	0x080003b0
 80002f8:	000f423f 	.word	0x000f423f

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffcd 	bl	80002cc <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b8 	.word	0x080003b8
 800038c:	080003b8 	.word	0x080003b8
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003bc 	.word	0x080003bc

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
